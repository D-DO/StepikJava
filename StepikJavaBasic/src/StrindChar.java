public class StrindChar {
    public static void main(String[] args) {
        String d = "\u0026\u0000\u0000\t\u0025";
        System.out.println(d);
        d = "A"+12;
        System.out.println(d);
        d = 'A'+"12";
        System.out.println(d);
        d = "A"+('\t'+'\u0003');
        System.out.println(d);
        d = 'A'+'1'+"2";
        System.out.println(d);

    }
}

// 'A' + "12" - в таких выражениях из двух элементов, один из которых типа String происходит обычная конкатенация (склеивание)
//
//         'A' + "12" = A12
//
//         "A" + 12 - в таких выражениях из двух элементов, один из которых типа String происходит обычная конкатенация (склеивание)
//
//         "A" + 12 = A12
//
//         'A' + '1' + "2" - в таких выражениях из трех элементов, где элементы находятся в такой последовательности, сначала происходит приведение типов char к int, их сложение, а затем конкатенация с типом String (не забываем, char так же содержит кодировку позиции символа в таблице Unicode, именно она указывается при приведении char к int):
//         (int) 'A' - 65;
//         (int) '1' - 49;
//         65 + 49 = 114 + "2" = 1142;
//
//         "A" + ('\t' + '\u0003') - в таких выражениях из трех элементов, где элементы находятся в такой последовательности, сначала происходит приведение типов char к int, их сложение, а затем конкатенация с типом String (если опустить скобки, произойдёт конкатенация между элементом String и элементами char по очереди. результат был бы A93):
//
//         '\t' - 9
//         '\u0003' - 3
//         9+3 = 12;
//         "A" + 12 = A12;